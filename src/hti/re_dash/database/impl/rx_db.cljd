(ns hti.re-dash.database.impl.rx-db
  (:require ["package:rxdb/rxdb.dart" :as rxdb]
            [hti.re-dash.database.protocol :as protocol]
            [hti.re-dash.flows :as flows]
            [hti.re-dash.flows-async :as flows-async]))


(defonce ^:private rx-db (atom nil))


(deftype RxDB []
  protocol/Database

  (init!
    [_ {:keys [name]}]
    (reset! rx-db
            (await
              (rxdb/getRxDatabase "javascript/dist/index.js" name))))


  (mutate!
    [_ db-fn]
    (when-let [rx-db @rx-db]
      (db-fn rx-db)
      (flows-async/run-flows! rx-db rx-db)))


  (subscribe
    [_ signals computation-fn query-vec]
    (let [s (cond

              ;; TODO for multi stream signals maybe rxdart/ForkJoinStream ??
              (vector? signals) (first signals)

              :else             signals)]

      (cond
        (dart/is? s rxdb/RxDatabase)
        (.$ (computation-fn s query-vec))

        (dart/is? s Stream)
        (.asyncMap s #(computation-fn % query-vec)))))

  (ref
    [_]
    @rx-db)


  (val
    [_]
    @rx-db))
