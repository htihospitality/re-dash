(ns acme.model
  (:require [hti.re-dash.core :as rd]))

(def area-flow
  {:id          :garage-area
   :inputs      {:w [:garage :width]
                 :h [:garage :length]}
   :output      (fn calc-area
                  [{:keys [w h]}]
                  (* w h))
   :path        [:garage :area]
   :live-inputs {:ks [:kill-switch]}
   :live?       (fn [{:keys [ks]}]
                  (= :off ks))})

(defn register!
  []

  ;; Register subscriptions to the input parameters
  (rd/reg-sub      ::width  (fn [db [_ room]] (get-in db [room :width])))
  (rd/reg-sub      ::length (fn [db [_ room]] (get-in db [room :length])))

  ;; Subscribe to the Flow's output path
  (rd/reg-sub      ::area   (fn [db [_ room]] (get-in db [room :area])))

  ;; Width & length controls (these cause the Flow's inputs to change and recalc the area)
  (rd/reg-event-db ::inc-w  (fn [db [_ room]] (update-in db [room :width] (fnil inc 0))))
  (rd/reg-event-db ::inc-h  (fn [db [_ room]] (update-in db [room :length] (fnil inc 0))))
  (rd/reg-event-db ::dec-w  (fn [db [_ room]] (update-in db [room :width] (fnil dec 0))))
  (rd/reg-event-db ::dec-h  (fn [db [_ room]] (update-in db [room :length] (fnil dec 0))))

  ;; Kill switch (causes the Flow's live? test to pass/fail)
  (rd/reg-sub      ::kill-switch (fn [db _] (:kill-switch db :off)))
  (rd/reg-event-db
    ::flip-kill-switch
    (fn [db [_ on-off]]
      (assoc db :kill-switch on-off)))

  ;; Flow register & de-register
  (rd/reg-event-fx
    ::reg-flow
    (fn [_ _]
      {:reg-flow area-flow}))

  (rd/reg-event-fx
    ::clear-flow
    (fn [_ _]
      {:clear-flow (:id area-flow)}))

  ;; Initialize db
  (rd/reg-event-db
    ::init
    (fn [db _]
      (-> (update db :garage merge {:width 20 :length 20})
          (assoc :kill-switch :off)))))
