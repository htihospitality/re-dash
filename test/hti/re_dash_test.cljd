(ns hti.re-dash-test
  (:require ["dart:async" :as da]
            [clojure.test :refer [deftest is testing use-fixtures]]
            [cljd.flutter :as f]
            [hti.re-dash :as rd]
            [hti.re-dash-testing :as rd-testing]))

(defn default-subscriptions
  ([]

   (hti.re-dash/reg-sub
     ::hoge
     (constantly {})
     (constantly 42))

   (hti.re-dash/reg-sub
     ::fuga
     (constantly {})
     (constantly 9001))

   (hti.re-dash/reg-sub
     :get-count
     (fn [db _]
       (:current-count db))))

  ([_]))

(use-fixtures :once default-subscriptions)

(use-fixtures :each rd-testing/reset-app-db-fixture)

(deftest build-sub-map-test

  (await (rd/dispatch-sync [:re-dash/initialize-db
                            {:foo {:bar 42} :baz 9001}]))

  (testing "Explicit input function"
    (let [dummy-state (atom nil)
          input-fn (fn dummy-input ([] dummy-state) ([_] dummy-state))]
      (testing "Just computation function"
        ;; (reg-sub ::foo (fn [_ _]) (fn [_ _]))
        (let [comp-fn #()
              {builder :signal-builder _computer :computation-fn}
              (rd/build-sub-map (list input-fn comp-fn))]
          (is (= (builder rd-testing/subscribe) input-fn))))
      (testing "Bad input"
        (is (thrown? Exception
                     (rd/build-sub-map (list 42 (fn [_ _]))))
            "Raises if input function is not a function"))
      (testing ":-> sugar"
        ;; (reg-sub ::foo (fn [_ _]) :-> :baz)
        (let [coords [::foo]
              {:keys [signal-builder computation-fn]}
              (rd/build-sub-map (list input-fn :-> nil?))
              signal-fn (signal-builder rd-testing/subscribe)]
          (is (= input-fn signal-fn))
          (is (= true (computation-fn @(signal-fn coords) coords)))))
      (testing ":=> sugar"
        ;; (reg-sub ::foo (fn [_ _]) :=> (fn [a b] (or a b)))
        (let [coords [::foo 42]
              {:keys [signal-builder computation-fn]}
              (rd/build-sub-map (list input-fn :=> (fn [a b] (or a (* 2 b)))))
              signal-fn (signal-builder rd-testing/subscribe)]
          (is (= input-fn signal-fn))
          (is (= 84 (computation-fn @(signal-fn coords) coords)))))
      (testing "Bad sugar"
        ;; (reg-sub ::foo (fn [_ _]) :/> (fn [_ _]))
        (is (thrown? Exception
                     (rd/build-sub-map (list input-fn :invalid> (fn [_ _]))))
            "Raises on unknown syntax sugar"))))
  (testing "No input function"
    (testing "Just computation function"
      ;; (reg-sub ::foo (fn [_ _]))
      (let [comp-fn #()
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list comp-fn))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= 9001 (:baz @(signal-fn [])))
            "The signal becomes the default app-db")
        (is (= comp-fn computation-fn))))
    (testing ":-> sugar"
      ;; (reg-sub ::foo :-> :baz)
      (let [coords [::foo]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :-> :baz))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= 9001 (computation-fn @(signal-fn coords) coords)))))
    (testing ":=> sugar"
      ;; (reg-sub ::foo :=> get-in)
      (let [coords [::foo :foo :baz]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :=> (fn [db a b] {(b db) (a db)})))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= {9001 {:bar 42}} (computation-fn @(signal-fn coords) coords)))))
    (testing "Bad sugar"
      ;; (reg-sub ::foo :/> (fn [_ _]))
      (is (thrown? Exception
                   (rd/build-sub-map (list :invalid> (fn [_ _]))))
          "Raises on unknown syntax sugar")))
  (testing "One sugar input pair"
    (testing "Computation function"
      ;; (reg-sub ::foo :<- [::hoge] (fn [n _] n))
      (let [coords [::foo]
            comp-fn (fn [n _] n)
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::hoge] comp-fn))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= 42 @(signal-fn coords)))
        (is (= comp-fn computation-fn))))
    (testing "Bad input sugar"
      (is (thrown? Exception
                   (rd/build-sub-map (list :<invalid [::hoge] (fn [_ _]))))
          "Raises on unknown syntax sugar"))
    (testing "Missing subscription"
      (let [coords [::foo]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::piyo] (fn [_ _])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (thrown? Exception (computation-fn @(signal-fn coords) coords))
            "If the subscription used as input isn't registered, raises when subscribed to")))
    (testing ":-> sugar"
      ;; (reg-sub ::foo :<- [::hoge] :-> (fn [n _] (* 2 n)))
      (let [coords [::foo 2]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::hoge] :-> (fn [n] (* 2 n))))
            signal-fn (signal-builder rd-testing/subscribe)]
        ;; TODO somehow deref Cell to check value
        (is (= 42 @(signal-fn coords)))
        (is (= 84 (computation-fn @(signal-fn coords) coords))
            "the subscription params are ignored with :->")))
    (testing ":=> sugar"
      ;; (reg-sub ::foo :<- [::hoge] :=> (fn [db a b] [db a b]))
      (let [coords [::foo :hoge :fuga]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map
              (list :<- [::hoge] :=> (fn [db a b] [db a b])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= 42 @(signal-fn coords)))
        (is (= [42 :hoge :fuga] (computation-fn @(signal-fn coords) coords)))))
    (testing "Bad output sugar"
      (is (thrown? Exception
                   (rd/build-sub-map (list :<- [::hoge] :invalid> (fn [_ _]))))
          "Raises on unknown syntax sugar")))
  (testing "Multiple sugar pairs"
    (testing "Computation function"
      ;; (reg-sub ::foo :<- [::hoge] :<- [::fuga] (fn [n _] n))
      (let [coords [::foo]
            comp-fn (fn [inputs _] inputs)
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::hoge] :<- [::fuga] comp-fn))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= (list 42 9001) (map deref (signal-fn coords))))
        (is (= comp-fn computation-fn))))
    (testing "Bad input sugar"
      (is (thrown? Exception
                   (rd/build-sub-map
                     (list :<- [::hoge] :<invalid [::fuga] (fn [_ _]))))
          "Raises on unknown syntax sugar")
      (is (thrown? Exception
                   (rd/build-sub-map
                     (list :<invalid [::hoge] :<- [::fuga] (fn [_ _]))))
          "Raises on unknown syntax sugar")
      (is (thrown? Exception
                   (rd/build-sub-map
                     (list :<invalid [::hoge] :<invalid [::fuga] (fn [_ _]))))
          "Raises on unknown syntax sugar"))
    (testing "Missing subscription"
      (let [coords [::foo]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::piyo] :<- [::hoge] (fn [_ _])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (thrown? Exception (computation-fn @(signal-fn coords) coords))
            "If the subscription used as input isn't registered, raises when subscribed to"))
      (let [coords [::foo]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::hoge] :<- [::piyo] (fn [_ _])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (thrown? Exception (computation-fn @(signal-fn coords) coords))
            "If the subscription used as input isn't registered, raises when subscribed to"))
      (let [coords [::foo]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map (list :<- [::piyo] :<- [::puyo] (fn [_ _])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (thrown? Exception (computation-fn @(signal-fn coords) coords))
            "If the subscription used as input isn't registered, raises when subscribed to")))
    (testing ":-> sugar"
      ;; (reg-sub ::foo :<- [::hoge] :<- [::fuga] :-> (fn [n] (* 2 n)))
      (let [coords [::foo 2]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map
              (list :<- [::hoge] :<- [::fuga] :-> (fn [[n _]] (* 2 n))))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= (list 42 9001) (map deref (signal-fn coords))))
        (is (= 84 (computation-fn (map deref (signal-fn coords)) coords))
            "the subscription params are ignored with :->")))
    (testing ":=> sugar"
      ;; (reg-sub ::foo :<- [::hoge] :<- [::fuga] :=> (fn [[_ x] a b] [x a b]))
      (let [coords [::foo :hoge :fuga]
            {:keys [signal-builder computation-fn]}
            (rd/build-sub-map
              (list :<- [::hoge] :<- [::fuga] :=> (fn [[_ x] a b] [x a b])))
            signal-fn (signal-builder rd-testing/subscribe)]
        (is (= (list 42 9001) (map deref (signal-fn coords))))
        (is (= [9001 :hoge :fuga]
               (computation-fn (map deref (signal-fn coords)) coords)))))
    (testing "Bad output sugar"
      (is (thrown? Exception
                   (rd/build-sub-map
                     (list :<- [::hoge] :<- [::fuga] :invalid> (fn [_ _]))))
          "Raises on unknown syntax sugar"))))

(deftest subscribe-multiple-inputs
  (rd/reg-sub
   :a
   (constantly "a"))

  (rd/reg-sub
   :b
   (constantly "b"))

  (rd/reg-sub
   :ab
   :<- [:a]
   :<- [:b]
   :-> (fn [[a b]] (str a b)))

  (is (= "ab" @(rd-testing/subscribe [:ab]))))


;; Events

(deftest dispatch-event-db

  (rd/reg-event-db
    :count
    (fn [db _]
      (let [current-count (inc (:current-count db 0))]
        (assoc db :current-count current-count))))

  (await (rd/dispatch-sync [:count]))

  (is (= 1
         @(rd-testing/subscribe [:get-count]))))

(deftest dispatch-event-fx

  (rd/reg-event-fx
    :count
    (fn [{:keys [db]} _]
      (let [current-count (inc (:current-count db 0))]
        {:db (assoc db :current-count current-count)})))

  (await (rd/dispatch-sync [:count]))

  (is (= 1
         @(rd-testing/subscribe [:get-count]))))

(deftest dispatch-event-cofx

  (rd/reg-cofx
    :add-val
    (fn [cofx _]
      (assoc cofx :add-val 5)))

  (rd/reg-event-fx
    :count
    [(rd/inject-cofx :add-val)]                  ;; <== The test
    (fn [{:keys [db add-val]} _]
      (let [current-count (+ (:current-count db 0) add-val)]
        {:db (assoc db :current-count current-count)})))

  (await (rd/dispatch-sync [:count]))

  (is (= 5
         @(rd-testing/subscribe [:get-count]))))

(deftest dispatch-event-cofx-future

  (rd/reg-cofx
    :add-val
    (fn [cofx _]
      (assoc cofx :add-val (await (Future.delayed (Duration .milliseconds 1)
                                                  (constantly 5))))))

  (rd/reg-event-fx
    :count
    [(rd/inject-cofx :add-val)]                  ;; <== The test
    (fn [{:keys [db add-val]} _]
      (let [current-count (+ (:current-count db 0) add-val)]
        {:db (assoc db :current-count current-count)})))

  (await (rd/dispatch-sync [:count]))

  (is (= 5
         @(rd-testing/subscribe [:get-count]))))

(deftest dispatch-event-subscribe
  (rd/reg-sub-as-cofx [::hoge])
  (rd/reg-sub-as-cofx [::fuga])
  (rd/reg-event-fx
    :hogefuga-adder
    [(rd/inject-cofx ::hoge)
     (rd/inject-cofx ::fuga)]
    (fn [{db :db ::keys [hoge fuga] :as _cofx} _]
      {:db (assoc db :hogefuga-sum (+ hoge fuga))}))

  (await (rd/dispatch-sync [:hogefuga-adder]))

  (rd/reg-sub
    :hogefuga-sum
    :-> :hogefuga-sum)

  (is (= 9043 @(rd-testing/subscribe [:hogefuga-sum]))))

(deftest dispatch-event-path

  (let [path [:path :to :current]]

    (await (rd/dispatch-sync [:re-dash/initialize-db
                              {:path {:to {:current {:count 4}}}}]))

    (rd/reg-event-fx
      :count-path
      [(rd/path path)]                         ;; <== The test
      (fn [{:keys [db]} _]
        (let [current (inc (:count db 0))]
          {:db (assoc db :count current)})))

    (hti.re-dash/reg-sub
      :get-count-path
      (fn [db _]
        (get-in db path)))

    (await (rd/dispatch-sync [:count-path]))

    (is (= {:count 5}
           @(rd-testing/subscribe [:get-count-path])))))

(deftest dispatch-multiple-events-incl-cofx-check-state

  (testing "Ordered event queue execution including coeffects. See Github issue: 21"

    (rd/reg-cofx
      :add-val
      (fn [cofx _]
        (assoc cofx :add-val 5)))

    (rd/reg-cofx
    :add-val-future
    (fn [cofx _]
      (assoc cofx :add-val (await (Future.delayed (Duration .milliseconds 1)
                                                  (constantly 5))))))

    (rd/reg-event-fx
      :count
      [(rd/inject-cofx :add-val)]                  ;; <== The test
      (fn [{:keys [db add-val]} _]
        (let [current-count (+ (:current-count db 0) add-val)]
          {:db (assoc db :current-count current-count)})))

    (rd/reg-event-fx
      :count-another
      [(rd/inject-cofx :add-val-future)]           ;; <== The test
      (fn [{:keys [db add-val]} _]
        (let [current-count (+ (:current-count db 0) add-val)]
          {:db (assoc db :current-count current-count)})))

    (rd/reg-event-fx
      :do-counts
      (fn [_ _]
        {:fx [[:dispatch [:count]]
              [:dispatch [:count-another]]]}))

    (rd/dispatch [:do-counts])

    (testing "End result in app-db should be 10 (both Coeffects adding 5)"

      (da/Future.delayed (Duration .milliseconds 1000)
                         #(is (= 10
                                 @(rd-testing/subscribe [:get-count])))))))

(deftest dispatch-multiple-events-in-queue-one-exception

  (testing "Ordered event queue execution including coeffects. See Github issue: 21"

    (rd/reg-event-fx
      :count
      (fn [{:keys [db]} _]
        (let [current-count (inc (:current-count db 0))]
          {:db (assoc db :current-count current-count)})))

    (rd/reg-event-fx
      :exception
      (fn [_ _]
        (throw (Exception. "This exception is part of a test case, and can be safely ignored."))))

    (rd/reg-event-fx
      :do-counts
      (fn [_ _]
        {:fx [[:dispatch [:count]]
              [:dispatch [:count]]
              [:dispatch [:count]]
              [:dispatch [:exception]]
              [:dispatch [:count]]
              [:dispatch [:count]]]}))

    (rd/dispatch [:do-counts])

    (testing "End result in app-db should be 5"

      (da/Future.delayed (Duration .milliseconds 1000)
                         #(is (= 5
                                 @(rd-testing/subscribe [:get-count])))))))



;; Flows

(deftest flow-interceptor

  (let [flow-ran-count (atom 0)
        flow           {:id     :room-area
                        :inputs {:w [:room :width]
                                 :h [:room :length]}
                        :output (fn calc-area [{:keys [w h]}]
                                  (swap! flow-ran-count inc)
                                  ((fnil * 0 0) w h))
                        :path   [:room :area]}]

    ;; Register subscriptions to the input parameters
    (rd/reg-sub      ::width  (fn [db _] (get-in db [:room :width])))
    (rd/reg-sub      ::length (fn [db _] (get-in db [:room :length])))

    ;; Subscribe to the Flow's output path
    (rd/reg-sub      ::area   (fn [db _] (get-in db [:room :area])))

    (rd/reg-event-db ::inc-w  (fn [db _] (update-in db [:room :width] inc)))
    (rd/reg-event-db ::inc-h  (fn [db _] (update-in db [:room :length] inc)))
    (rd/reg-event-db ::inc-noop  (fn [db _] db))

    (rd/reg-event-db ::init   (fn [db _] (update db :room merge {:width 10 :length 15})))

    (await (rd/dispatch-sync [::init]))

    (rd/reg-flow flow)



    (testing "output function runs the first time as width changed"

      (await (rd/dispatch-sync [::inc-w]))

      (is (= 1 @flow-ran-count))
      (is (= 11 @(rd-testing/subscribe [::width])))
      (is (= 15 @(rd-testing/subscribe [::length])))
      (is (= 165 @(rd-testing/subscribe [::area]))))


    (testing "output function runs a second time as length changed"

      (await (rd/dispatch-sync [::inc-h]))

      (is (= 2 @flow-ran-count))
      (is (= 11 @(rd-testing/subscribe [::width])))
      (is (= 16 @(rd-testing/subscribe [::length])))
      (is (= 176 @(rd-testing/subscribe [::area]))))


    (testing "output function does NOT run a third time as both inputs remain unchanged"

      (await (rd/dispatch-sync [::inc-noop]))

      (is (= 2 @flow-ran-count))
      (is (= 11 @(rd-testing/subscribe [::width])))
      (is (= 16 @(rd-testing/subscribe [::length])))
      (is (= 176 @(rd-testing/subscribe [::area]))))))
