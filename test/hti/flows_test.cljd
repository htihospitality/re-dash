(ns hti.flows-test
  (:require ["dart:async" :as da]
            [clojure.test :refer [deftest is testing use-fixtures]]
            [cljd.flutter :as f]
            [hti.re-dash.alpha :as rd]
            [hti.re-dash.testing.alpha :as rd-testing]
            [hti.re-dash.flows :as flows]
            [hti.re-dash.database.protocol :as proto]
            [hti.re-dash.database :as db]))

(defn default-flow-handlers
  ([]

   ;; Register subscriptions to the flow input parameters
   (rd/reg-sub      ::width  (fn [db [_ room]] (get-in db [room :width])))
   (rd/reg-sub      ::length (fn [db [_ room]] (get-in db [room :length])))

   ;; Subscribe to the Flow's output path
   (rd/reg-sub      ::area   (fn [db [_ room]] (get-in db [room :area])))

   (rd/reg-event-db ::inc-w  (fn [db [_ room]] (update-in db [room :width] (fnil inc 0))))
   (rd/reg-event-db ::inc-h  (fn [db [_ room]] (update-in db [room :length] (fnil inc 0))))

   (rd/reg-event-db
     ::flip-kill-switch
     (fn [db [_ on-off]]
       (assoc db :kill-switch on-off)))

   (rd/reg-event-fx
     ::reg-flow-event
     (fn [{:keys [db]} [_ flow]]
       {:db db
        :fx [[:reg-flow flow]]}))

   (rd/reg-event-fx
     ::clear-flow-event
     (fn [{:keys [db]} [_ flow-id]]
       {:db db
        :fx [[:clear-flow flow-id]]}))

   (rd/reg-event-db ::inc-noop  (fn [db _] db))

   (rd/reg-event-db ::init   (fn [db _] (-> db
                                            (update :kitchen merge {:width 10 :length 15})
                                            (update :garage merge {:width 20 :length 25})
                                            (update :bathroom merge {:width 30 :length 35})
                                            (assoc :kill-switch :off)))))

  ([_]))


(use-fixtures :once default-flow-handlers)

(use-fixtures :each rd-testing/reset-app-db-fixture)


(deftest flow

  (let [flow-ran-count (atom 0)
        flow           {:id     :garage-area
                        :inputs {:w [:garage :width]
                                 :h [:garage :length]}
                        :output (fn calc-area [{:keys [w h]}]
                                  (swap! flow-ran-count inc)
                                  ((fnil * 0 0) w h))
                        :path   [:garage :area]}]


    (await (rd/dispatch-sync [::init]))


    (testing "flow registration runs the flow output function for the first time"

      (rd/reg-flow flow)

      (is (= 1 @flow-ran-count))
      (is (= 20 @(rd-testing/subscribe [::width :garage])))
      (is (= 25 @(rd-testing/subscribe [::length :garage])))
      (is (= 500 @(rd-testing/subscribe [::area :garage]))))


    (testing "output function runs the second time as width changed"

      (await (rd/dispatch-sync [::inc-w :garage]))

      (is (= 2 @flow-ran-count))
      (is (= 21 @(rd-testing/subscribe [::width :garage])))
      (is (= 25 @(rd-testing/subscribe [::length :garage])))
      (is (= 525 @(rd-testing/subscribe [::area :garage])))      )


    (testing "output function runs a third time as length changed"

      (await (rd/dispatch-sync [::inc-h :garage]))

      (is (= 3 @flow-ran-count))
      (is (= 21 @(rd-testing/subscribe [::width :garage])))
      (is (= 26 @(rd-testing/subscribe [::length :garage])))
      (is (= 546 @(rd-testing/subscribe [::area :garage]))))


    (testing "output function does NOT run a fourth time as both inputs remain unchanged"

      (await (rd/dispatch-sync [::inc-noop]))

      (is (= 3 @flow-ran-count))
      (is (= 21 @(rd-testing/subscribe [::width :garage])))
      (is (= 26 @(rd-testing/subscribe [::length :garage])))
      (is (= 546 @(rd-testing/subscribe [::area :garage]))))

    (testing "subscribing to a flow directly"
      (is (= 546 @(rd-testing/subscribe [:flow {:id :garage-area}]))))))

(defn calc-area
  [{:keys [w h]}]
  ((fnil * 0 0) w h))

(deftest flow-dependencies

  (await (rd/dispatch-sync [::init]))

  (rd/reg-flow
    {:id     :kitchen-area
     :inputs {:w [:kitchen :width]
              :h [:kitchen :length]}
     :output calc-area
     :path   [:kitchen :area]})

  (rd/reg-flow
    {:id     :garage-area
     :inputs {:w [:garage :width]
              :h [:garage :length]}
     :output calc-area
     :path   [:garage :area]})

  (rd/reg-flow
    {:id     :main-room-ratio
     :inputs {:w (rd/flow<- :kitchen-area)
              :h (rd/flow<- :garage-area)}
     :output calc-area
     :path   [:main :area]})

  (rd/reg-flow
    {:id     :universal-ratio
     :inputs {:w (rd/flow<- :main-room-ratio)
              :h (rd/flow<- :main-room-ratio)}
     :output calc-area
     :path   [:universal :area]})

  (is (= 150 @(rd-testing/subscribe [::area :kitchen])))
  (is (= 500 @(rd-testing/subscribe [::area :garage])))
  (is (= 75000 @(rd-testing/subscribe [::area :main])))
  (is (= 5625000000 @(rd-testing/subscribe [::area :universal]))))


(deftest flow-lifecycle

  (await (rd/dispatch-sync [::init]))

  (testing "::initialize on first registration runs output"

    (rd/reg-flow
      {:id     :kitchen-area
       :inputs {:w [:kitchen :width]
                :h [:kitchen :length]}
       :output calc-area
       :path   [:some-room-one :area]})           ;; <== Test


    (is (= {:some-room-one {:area 150}}           ;; <== Test
           (select-keys (proto/val @db/impl)
                        [:some-room-one
                         :some-room-two
                         :some-room-three]))))


  (testing "re-registering the same flow id runs ::cleanup then ::output"

    (rd/reg-flow
      {:id     :kitchen-area
       :inputs {:w [:kitchen :width]
                :h [:kitchen :length]}
       :output calc-area
       :path   [:some-room-two :area]})           ;; <== Test


    (is (= {:some-room-two {:area 150}}           ;; <== Test
           (select-keys (proto/val @db/impl)
                        [:some-room-one
                         :some-room-two
                         :some-room-three]))))

  (testing "now register it again but with a kill switch"

    (rd/reg-flow
      {:id          :kitchen-area
       :inputs      {:w [:kitchen :width]
                     :h [:kitchen :length]}
       :output      calc-area
       :path        [:some-room-three :area]
       :live-inputs {:ks [:kill-switch]}
       :live?       (fn [{:keys [ks]}]
                      (= :off ks))})

    (is (= 150 @(rd-testing/subscribe [:flow {:id :kitchen-area}])))

    (testing "increase kitchen width and confirm flow ran as it is still live"
      (await (rd/dispatch-sync [::inc-w :kitchen]))

      (is (= 165 @(rd-testing/subscribe [:flow {:id :kitchen-area}]))))


    (testing "now flip kill switch ON, increase width and confirm flow did NOT run as it's dead"
      (await (rd/dispatch-sync [::flip-kill-switch :on]))
      (await (rd/dispatch-sync [::inc-w :kitchen]))

      (is (nil? @(rd-testing/subscribe [:flow {:id :kitchen-area}]))))


    (testing "now flip kill switch OFF, increase width and confirm flow DID run as it's revived"
      (await (rd/dispatch-sync [::flip-kill-switch :off]))
      (await (rd/dispatch-sync [::inc-w :kitchen]))

      (is (= 195 @(rd-testing/subscribe [:flow {:id :kitchen-area}]))))))


(deftest flow-lifecycle-effects

  (rd/register-defaults!)

  (await (rd/dispatch-sync [::init]))

  (testing "life-cycle effects"

    (let [flow {:id     :bathroom-area
                :inputs {:w [:bathroom :width]
                         :h [:bathroom :length]}
                :output calc-area
                :path   [:some :path :area]}]

      (testing "flow gets registered by built-in fx"

        (await (rd/dispatch-sync [::reg-flow-event flow]))

        (await (rd/dispatch-sync [::inc-w :bathroom]))

        (is (= 1085 @(rd-testing/subscribe [:flow {:id :bathroom-area}]))))


      (testing "flow's output path gets cleared by built-in fx"

        (await (rd/dispatch-sync [::clear-flow-event :bathroom-area]))

        (await (rd/dispatch-sync [::inc-w :bathroom]))

        (testing "no area anymore"
          (is (= {:length 35 :width 32}
                 (:bathroom (proto/val @db/impl)))))))))
